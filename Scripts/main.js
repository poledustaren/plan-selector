// Generated by CoffeeScript 2.0.2
(function() {
  var arrayOfShapes, counterCircle, ff, groupContextMenu, initButtons, log, logOn, pathArray, selectionItemCounter, styles;

  logOn = false;

  selectionItemCounter = 0;

  // массив вершин - которые кружки
  arrayOfShapes = [];

  // массив полигонов
  pathArray = [];

  counterCircle = 0;

  // контекстное меню
  groupContextMenu = -1;

  log = (text) => {
    if (logOn) {
      return console.log(text);
    }
  };

  styles = {
    style: {
      fill: "black",
      stroke: "#880e00",
      strokeWidth: 20
    },
    styleCircle: {
      fill: "#ff1",
      stroke: "#ff1737",
      strokeWidth: 1,
      opacity: 0.5
    },
    contextMenu_block: {
      fill: "#406b88",
      strokeWidth: 10,
      opacity: 0.3
    },
    styleButton: {
      class: "option_button"
    },
    styleButtonPushed: {
      class: "option_button pushed"
    },
    styleText: {
      fill: "#fbfffd"
    },
    styleInfoRect: {
      fill: "#fbfffd",
      strokeWidth: 3,
      stroke: "#000000"
    }
  };

  ff = {
    class_operation: {
      addClass: function(toClass, forAddClass) {
        return $(`.${toClass}`).each(function() {
          var original;
          original = $(this).attr("class");
          return $(this).attr("class", `${original} ${forAddClass}`);
        });
      },
      removeClass: function(toClass, removedClass) {
        return $(`.${toClass}`).each(function() {
          var original;
          original = $(this).attr("class");
          original = original.replace(removedClass, "");
          return $(this).attr("class", `${original}`);
        });
      }
    },
    color_operation: {
      doRed: function(className) {
        return $(`.${className}`).attr({
          fill: "red"
        });
      },
      doGreen: function(className) {
        return $(`.${className}`).attr({
          fill: "green"
        });
      },
      doBlue: function(className) {
        return $(`.${className}`).attr({
          fill: "blue"
        });
      }
    },
    data_operation: {
      set_data: function(jQObject, fieldName, value) {
        jQObject.data(fieldName, value);
        return jQObject.attr(`data-${fieldName}`, value);
      },
      delete_data: function(jQObject, fieldName) {
        jQObject.data(fieldName, "");
        return jQObject.attr(`data-${fieldName}`, "");
      }
    },
    selected_items_operation: {
      bind_with_area: function(jQitem) {
        var item_id;
        item_id = jQitem.data().id;
        ff.data_operation.set_data($(".need_bind"), "item_id", item_id);
        ff.class_operation.addClass("need_bind", "alrady_beended");
        ff.class_operation.removeClass("alrady_beended", "need_bind");
        ff.class_operation.removeClass("alrady_beended", "not_binded");
        return jQitem.addClass("item_binded");
      },
      delete_binded: function(itemId) {
        return $(`.item_binded[data-id='${itemId}']`).removeClass("item_binded");
      }
    },
    path_operation: {
      init_clicked_path: (object, itemClass) => {
        return object.click(function() {
          var notBinded;
          notBinded = object.attr().class.indexOf("alrady_beended") < 0;
          if (notBinded) {
            ff.class_operation.removeClass("plane_area", "need_bind");
            return ff.class_operation.addClass(itemClass, "need_bind");
          }
        });
      },
      clear_path_binding: function(object) {
        var item_id;
        item_id = object.data("item_id");
        ff.selected_items_operation.delete_binded(item_id);
        return ff.data_operation.delete_data($(`[data-item_id=${item_id}]`), "item_id");
      }
    },
    init_operation: {
      show_data: function(paper, data) {
        var i, idJq, item, len, parsedData, pathPolygon, results, stylePolygon;
        data = $("#SvgCoords").val();
        if (data) {
          data = data.replaceAll("«", "\"").replaceAll("»", "\"");
          parsedData = JSON.parse(data);
          results = [];
          for (i = 0, len = parsedData.length; i < len; i++) {
            item = parsedData[i];
            idJq = `selection_item_${selectionItemCounter}`;
            stylePolygon = {
              class: `plane_area alrady_beended selection_item_${selectionItemCounter} `,
              id: idJq,
              stroke: "#000000",
              strokeWidth: 1,
              opacity: 0.5,
              fill: "#2d8816"
            };
            pathPolygon = paper.path(item.path).attr(stylePolygon);
            ff.data_operation.set_data($(`#${idJq}`), "item_id", item.item_id);
            $(`.svg_plan_item[data-id='${item.item_id}']`).addClass("item_binded");
            results.push(selectionItemCounter++);
          }
          return results;
        }
      }
    }
  };

  initButtons = {
    initSvgPlanItemClick: function(initNewPath) {
      return $(".svg_plan_item").click(function() {
        var pressedItem, thisIsNotBindedShit, weHaveAreaForBind;
        thisIsNotBindedShit = !$(this).hasClass("item_binded");
        weHaveAreaForBind = $(".need_bind").length > 0;
        if (thisIsNotBindedShit && weHaveAreaForBind) {
          pressedItem = $(this);
          ff.selected_items_operation.bind_with_area(pressedItem);
          return initNewPath();
        }
      });
    },
    save_selected_area: function() {
      return $("#save_area_svg").click(function() {
        var resultObject;
        resultObject = [];
        $(".alrady_beended").each(function() {
          var item;
          item = {
            item_id: $(this).data("item_id"),
            path: $(this).attr("d")
          };
          return resultObject.push(item);
        });
        $("#SvgCoords").val(JSON.stringify(resultObject));
        return $("form").submit();
      });
    }
  };

  window.onload = () => {
    var addEventClickWithInfo, clearDots, clearPath, contextmenu_init_addButton, contextmenu_init_deleteButton, createInfoReactangle, createNewPath, deletePathPolygon, getCoordinateForInfoRectangle, imagePath, initNewPolygon, initPressButton, itemForDelete, paper, path, updatePath;
    paper = Snap('#plan-body');
    imagePath = $(".image_for_area").attr("xlink:href");
    $("imagePath").load(function() {
      console.log(this.width);
      return console.log(this.height);
    });
    ff.init_operation.show_data(paper, "");
    styles.stylePolygon = {
      class: `plane_area not_binded selection_item_${selectionItemCounter} `,
      id: `selection_item_${selectionItemCounter}`,
      stroke: "#000000",
      strokeWidth: 1,
      opacity: 0.5,
      fill: "#2d8816"
    };
    itemForDelete = `selection_item_${selectionItemCounter}`;
    selectionItemCounter++;
    
    //# добавляем полигон
    path = paper.path("").attr(styles.stylePolygon);
    ff.path_operation.init_clicked_path(path, "selection_item_0");
    
    //# событие на кнопку
    clearDots = () => {
      var dot, i, len, results;
      results = [];
      for (i = 0, len = arrayOfShapes.length; i < len; i++) {
        dot = arrayOfShapes[i];
        results.push(((dot) => {
          return dot.remove();
        })(dot));
      }
      return results;
    };
    
    //# очищаем массив для построения полигона
    clearPath = function() {
      return pathArray = [];
    };
    deletePathPolygon = function(name) {
      var dataId, id;
      id = name;
      dataId = $(`#${id}`).attr("data-item_id");
      ff.path_operation.clear_path_binding($(`#${id}`));
      return $(`#${id}`).remove();
    };
    //# получим центр координат в полигоне
    getCoordinateForInfoRectangle = (pathCoodinates) => {
      var arrayOfCoordinates, coordinate, i, len, lenghtPath, result_coordinate;
      arrayOfCoordinates = pathCoodinates.split("L").map(function(v) {
        return v.replace(" Z", "").replace("M ", "");
      });
      result_coordinate = {
        averageX: 0,
        averageY: 0
      };
      lenghtPath = arrayOfCoordinates.length;
      for (i = 0, len = arrayOfCoordinates.length; i < len; i++) {
        coordinate = arrayOfCoordinates[i];
        result_coordinate.averageX += coordinate.split(',')[0] / lenghtPath;
        result_coordinate.averageY += coordinate.split(',')[1] / lenghtPath;
      }
      return result_coordinate;
    };
    //#
    createInfoReactangle = (result_coordinate, selectionItemCounter) => {
      return paper.rect(result_coordinate.averageX, result_coordinate.averageY, 100, 100).attr(styles.styleInfoRect).class = `inforRectangle inforRectangle_id_${selectionItemCounter}`;
    };
    addEventClickWithInfo = (className, selectionItemCounter) => {
      return $(`.${className}`).click(function() {
        var coordinatesForRect, pathInfo;
        pathInfo = $(this).attr('d');
        coordinatesForRect = getCoordinateForInfoRectangle(pathInfo);
        return createInfoReactangle(coordinatesForRect, selectionItemCounter);
      });
    };
    
    //# заново инициализируем path и создаем полигон 
    createNewPath = function() {
      var className, itemClass;
      itemClass = `selection_item_${selectionItemCounter}`;
      className = `plane_area not_binded selection_item_${selectionItemCounter}`;
      selectionItemCounter++;
      styles.stylePolygon.class = className;
      styles.stylePolygon.id = itemClass;
      path = paper.path("").attr(styles.stylePolygon);
      return ff.path_operation.init_clicked_path(path, itemClass);
    };
    
    //# подготовка и добавленеи нового полигона
    initNewPolygon = function() {
      clearPath();
      clearDots();
      return createNewPath();
    };
    initNewPolygon();
    initPressButton = function(button) {
      return button.mouseover(function() {
        return this.attr(styles.styleButtonPushed);
      }).mouseout(function() {
        return this.attr(styles.styleButton);
      });
    };
    
    //# перерисовываем путь
    updatePath = function() {
      var first, i, len, node, pathString, ref;
      first = pathArray[0];
      pathString = `M ${first.x},${first.y}`;
      ref = pathArray.slice(1);
      for (i = 0, len = ref.length; i < len; i++) {
        node = ref[i];
        pathString += `L${node.x},${node.y}`;
      }
      pathString += " Z";
      return path.attr({
        d: pathString
      });
    };
    paper.mousedown(function(e) {
      var circlePoint;
      log(e.target.tagName);
      if (e.target.tagName === 'image' && e.which === 1) {
        styles.styleCircle.class = `selection_circle_${counterCircle}`;
        counterCircle++;
        circlePoint = paper.circle(e.offsetX, e.offsetY, 5).attr(styles.styleCircle).data('i', pathArray.length).drag(function(dx, dy, x, y) {
          var corrector_for_mouse_x, corrector_for_mouse_y, currentNode;
          corrector_for_mouse_y = -235;
          corrector_for_mouse_x = -20;
          this.attr({
            cx: x + corrector_for_mouse_x,
            cy: y + corrector_for_mouse_y
          });
          currentNode = pathArray[this.data('i')];
          currentNode.x = x + corrector_for_mouse_x;
          currentNode.y = y + corrector_for_mouse_y;
          return updatePath();
        });
        arrayOfShapes.push(circlePoint);
        log(`массив форм ${arrayOfShapes}`);
        pathArray.push({
          x: e.offsetX,
          y: e.offsetY
        });
        return updatePath();
      }
    });
    
    //инициализируе кнопку добавления новой херни
    contextmenu_init_addButton = function(e) {
      var contextmenu_add, text_add;
      contextmenu_add = paper.rect(e.offsetX, e.offsetY, 200, 40).attr(styles.styleButton).click(function() {
        return initNewPolygon();
      });
      text_add = paper.text(e.offsetX + 3, e.offsetY + 14, "Добавить еще").attr(styles.styleText).click(function() {
        return initNewPolygon();
      });
      initPressButton(contextmenu_add);
      return paper.g(contextmenu_add, text_add);
    };
    
    //инициализируе кнопку удаления херни
    contextmenu_init_deleteButton = function(e) {
      var contextmenu_delete, text_delete;
      // квадратик 
      contextmenu_delete = paper.rect(e.offsetX, e.offsetY + 40, 200, 40).attr(styles.styleButton).click(function() {
        deletePathPolygon(itemForDelete);
        return initNewPolygon();
      });
      // текст для удаления 
      text_delete = paper.text(e.offsetX + 3, e.offsetY + 14 + 40, "Удалить").attr(styles.styleText).click(function() {
        deletePathPolygon(itemForDelete);
        return initNewPolygon();
      });
      initPressButton(contextmenu_delete);
      return paper.g(contextmenu_delete, text_delete);
    };
    
    // нажимаем правую кнопку если то чокаво
    $("svg").contextmenu(function(e) {
      var context_add, context_delete, hasSelectionItemClass;
      itemForDelete = e.target.id;
      hasSelectionItemClass = e.target.className.baseVal.toString().indexOf("selection_item") > 0;
      
      // логируем всякую херню
      log(`id нажатой области - ${e.target.id}`);
      log(`есть ли selection_item класс у нажатой области - ${hasSelectionItemClass}`);
      if (groupContextMenu !== -1) {
        groupContextMenu.clear();
      }
      groupContextMenu = paper.g();
      
      // пытаемся понять куда мы конкретно тыкнули 
      if (hasSelectionItemClass) {
        // если ткнули в область разметки
        context_delete = contextmenu_init_deleteButton(e);
        groupContextMenu = paper.g(context_delete); //#,condext_bind      
      } else {
        // если ткнули просто в картинку например
        context_add = contextmenu_init_addButton(e);
        groupContextMenu = paper.g(context_add);
      }
      return false;
    });
    $("svg").click(function(e) {
      if (groupContextMenu !== -1 && e.which === 1) {
        return groupContextMenu.remove();
      }
    });
    
    //привяжем клики по областям
    initButtons.initSvgPlanItemClick(initNewPolygon);
    return initButtons.save_selected_area();
  };

}).call(this);

//# sourceMappingURL=main.js.map
